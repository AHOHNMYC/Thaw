package thaw.plugins.insertPlugin;

import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import thaw.core.Config;
import thaw.core.I18n;
import thaw.core.Logger;
import thaw.fcp.FCPClientPut;
import thaw.gui.FileChooser;
import thaw.gui.MainWindow;
import thaw.gui.WarningWindow;
import thaw.plugins.InsertPlugin;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.util.*;

public class InsertPanel extends JDialog implements ItemListener, Observer {
	private JPanel panelFilesToInsert;
	private JList selectedFiles;
	private DefaultListModel selectedFilesListModel;
	private JPanel panelAddRemove;
	private JButton btnAdd;
	private JButton btnRemove;
	private JPanel panelOptions;
	private JComboBox prioritySelecter;
	private JLabel priorityLabel;
	private JCheckBox compressSelecter;
	private JLabel compressLabel;
	private JCheckBox globalSelecter;
	private JLabel globalLabel;
	private JLabel mimeLabel;
	private JComboBox mimeField;
	private JPanel panelKeyType;
	private JRadioButton rbCHK;
	private JRadioButton rbKSK;
	private JRadioButton rbSSK_USK;
	private JButton letsGoButton;

	private final static int MIN_PRIORITY = 6;

	private JLabel selectRevLabel;
	private JTextField revField;

	private JLabel selectNameLabel;
	private JTextField nameField;
	private ButtonGroup keyRadioGroup;

	private JLabel publicKeyLabel;
	private JTextField publicKeyField;
	private JLabel privateKeyLabel;
	private JTextField privateKeyField;
	private JPanel panelInsert;
	private ButtonGroup keyRadioButtons;

	private InsertPlugin insertPlugin;
	private int keyType;
	private FCPClientPut lastInsert = null;

	private Config config; /* keep a ref to the config for the "lastSourceDirectory" option */
	private MainWindow mainWindow;

	public InsertPanel(final InsertPlugin insertPlugin,
	                   final Config config, final MainWindow mainWindow,
	                   final boolean advancedMode) {

		this.insertPlugin = insertPlugin;
		this.config = config;
		this.mainWindow = mainWindow;

		// JGoodie component creation code
		$$$setupUI$$$();

		// FILE SELECTION
		setContentPane(panelInsert);
		setModal(true);

		btnAdd.addActionListener(new AddFileActionPerformed());
		btnRemove.addActionListener(new RemoveFileActionPerformed());

		compressLabel.setLabelFor(compressSelecter);
		globalLabel.setLabelFor(globalSelecter);

		// KEY TYPE SELECTION
		keyRadioGroup = new ButtonGroup();
		keyRadioGroup.add(rbCHK);
		keyRadioGroup.add(rbKSK);
		keyRadioGroup.add(rbSSK_USK);
		rbCHK.addItemListener(this);
		rbKSK.addItemListener(this);
		rbSSK_USK.addItemListener(this);

		// PRIORITY SELECTION
		prioritySelecter.addItem(I18n.getMessage("thaw.plugin.priority.p0"));
		prioritySelecter.addItem(I18n.getMessage("thaw.plugin.priority.p1"));
		prioritySelecter.addItem(I18n.getMessage("thaw.plugin.priority.p2"));
		prioritySelecter.addItem(I18n.getMessage("thaw.plugin.priority.p3"));
		prioritySelecter.addItem(I18n.getMessage("thaw.plugin.priority.p4"));
		prioritySelecter.addItem(I18n.getMessage("thaw.plugin.priority.p5"));
		prioritySelecter.addItem(I18n.getMessage("thaw.plugin.priority.p6"));
		prioritySelecter.setSelectedItem(I18n.getMessage("thaw.plugin.priority.p4"));
		prioritySelecter.repaint();

		setRevAndNameEnabled(false);

		// MIME TYPE
		final Vector<String> mimes = DefaultMIMETypes.getAllMIMETypes();
		mimes.add(0, I18n.getMessage("thaw.plugin.insert.autodetectMime"));
		mimeField.removeAllItems();
		for (Object mime : mimes) {
			mimeField.addItem(mime);
		}
		mimeField.repaint();

		setKeysEnabled(false);

		panelFilesToInsert.setVisible(true);
		panelOptions.setVisible(advancedMode);
		panelKeyType.setVisible(advancedMode);

		letsGoButton.addActionListener(new InsertActionPerformed());
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		createUIComponents();
		panelInsert = new JPanel();
		panelInsert.setLayout(new FormLayout("fill:max(d;170dlu):noGrow,left:4dlu:noGrow,fill:max(d;170dlu):grow", "center:max(d;4px):noGrow,top:4dlu:noGrow,center:d:grow,top:4dlu:noGrow,center:d:noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow"));
		panelFilesToInsert = new JPanel();
		panelFilesToInsert.setLayout(new FormLayout("fill:max(d;100px):grow", "center:d:grow,top:4dlu:noGrow,center:d:noGrow"));
		CellConstraints cc = new CellConstraints();
		panelInsert.add(panelFilesToInsert, cc.xyw(1, 3, 3, CellConstraints.DEFAULT, CellConstraints.FILL));
		panelFilesToInsert.setBorder(BorderFactory.createTitledBorder(ResourceBundle.getBundle("thaw/i18n/thaw").getString("thaw.plugin.insert.filesToInsert")));
		final JScrollPane scrollPane1 = new JScrollPane();
		panelFilesToInsert.add(scrollPane1, cc.xy(1, 1, CellConstraints.DEFAULT, CellConstraints.FILL));
		scrollPane1.setViewportView(selectedFiles);
		panelAddRemove = new JPanel();
		panelAddRemove.setLayout(new FormLayout("fill:d:noGrow,left:4dlu:noGrow,fill:max(d;4px):noGrow", "center:p:grow"));
		panelFilesToInsert.add(panelAddRemove, cc.xy(1, 3, CellConstraints.DEFAULT, CellConstraints.FILL));
		btnAdd = new JButton();
		this.$$$loadButtonText$$$(btnAdd, ResourceBundle.getBundle("thaw/i18n/thaw").getString("thaw.plugin.insert.addFiles"));
		panelAddRemove.add(btnAdd, cc.xy(1, 1));
		btnRemove = new JButton();
		this.$$$loadButtonText$$$(btnRemove, ResourceBundle.getBundle("thaw/i18n/thaw").getString("thaw.plugin.insert.removeFiles"));
		panelAddRemove.add(btnRemove, cc.xy(3, 1));
		panelOptions = new JPanel();
		panelOptions.setLayout(new FormLayout("fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:d:noGrow,left:4dlu:noGrow,fill:d:noGrow", "center:d:noGrow,top:4dlu:noGrow,center:d:noGrow,top:4dlu:noGrow,center:d:noGrow,top:4dlu:noGrow,center:d:noGrow"));
		panelInsert.add(panelOptions, cc.xy(1, 5, CellConstraints.DEFAULT, CellConstraints.FILL));
		panelOptions.setBorder(BorderFactory.createTitledBorder(ResourceBundle.getBundle("thaw/i18n/thaw").getString("thaw.plugin.insert.options")));
		prioritySelecter = new JComboBox();
		panelOptions.add(prioritySelecter, cc.xy(5, 1));
		priorityLabel = new JLabel();
		this.$$$loadLabelText$$$(priorityLabel, ResourceBundle.getBundle("thaw/i18n/thaw").getString("thaw.common.priority"));
		panelOptions.add(priorityLabel, cc.xy(3, 1));
		compressLabel = new JLabel();
		this.$$$loadLabelText$$$(compressLabel, ResourceBundle.getBundle("thaw/i18n/thaw").getString("thaw.common.compressInsert"));
		panelOptions.add(compressLabel, cc.xy(3, 3));
		compressSelecter = new JCheckBox();
		compressSelecter.setSelected(true);
		panelOptions.add(compressSelecter, cc.xy(5, 3));
		globalLabel = new JLabel();
		this.$$$loadLabelText$$$(globalLabel, ResourceBundle.getBundle("thaw/i18n/thaw").getString("thaw.common.globalQueue"));
		panelOptions.add(globalLabel, cc.xy(3, 5));
		globalSelecter = new JCheckBox();
		globalSelecter.setSelected(true);
		globalSelecter.setText("");
		panelOptions.add(globalSelecter, cc.xy(5, 5));
		mimeLabel = new JLabel();
		this.$$$loadLabelText$$$(mimeLabel, ResourceBundle.getBundle("thaw/i18n/thaw").getString("thaw.plugin.insert.mimeType"));
		panelOptions.add(mimeLabel, cc.xy(3, 7));
		mimeField = new JComboBox();
		panelOptions.add(mimeField, cc.xy(5, 7));
		panelKeyType = new JPanel();
		panelKeyType.setLayout(new FormLayout("fill:d:noGrow,left:4dlu:noGrow,fill:max(d;100dlu):grow", "center:d:noGrow,center:d:noGrow,center:d:noGrow,top:4dlu:noGrow,center:d:noGrow,top:4dlu:noGrow,center:d:noGrow,top:4dlu:noGrow,center:d:noGrow,top:4dlu:noGrow,center:d:noGrow"));
		panelInsert.add(panelKeyType, cc.xy(3, 5, CellConstraints.DEFAULT, CellConstraints.FILL));
		panelKeyType.setBorder(BorderFactory.createTitledBorder(ResourceBundle.getBundle("thaw/i18n/thaw").getString("thaw.plugin.insert.keyType")));
		rbCHK = new JRadioButton();
		rbCHK.setSelected(true);
		this.$$$loadButtonText$$$(rbCHK, ResourceBundle.getBundle("thaw/i18n/thaw").getString("thaw.plugin.insert.CHK"));
		panelKeyType.add(rbCHK, cc.xyw(1, 1, 3));
		rbKSK = new JRadioButton();
		this.$$$loadButtonText$$$(rbKSK, ResourceBundle.getBundle("thaw/i18n/thaw").getString("thaw.plugin.insert.KSK"));
		panelKeyType.add(rbKSK, cc.xyw(1, 2, 3));
		rbSSK_USK = new JRadioButton();
		this.$$$loadButtonText$$$(rbSSK_USK, ResourceBundle.getBundle("thaw/i18n/thaw").getString("thaw.plugin.insert.SSK"));
		panelKeyType.add(rbSSK_USK, cc.xyw(1, 3, 3));
		selectRevLabel = new JLabel();
		selectRevLabel.setEnabled(false);
		this.$$$loadLabelText$$$(selectRevLabel, ResourceBundle.getBundle("thaw/i18n/thaw").getString("thaw.plugin.insert.selectRev"));
		panelKeyType.add(selectRevLabel, cc.xy(1, 5));
		revField = new JTextField();
		revField.setEnabled(false);
		revField.setText("0");
		panelKeyType.add(revField, cc.xy(3, 5, CellConstraints.FILL, CellConstraints.DEFAULT));
		selectNameLabel = new JLabel();
		selectNameLabel.setEnabled(false);
		this.$$$loadLabelText$$$(selectNameLabel, ResourceBundle.getBundle("thaw/i18n/thaw").getString("thaw.plugin.insert.selectName"));
		panelKeyType.add(selectNameLabel, cc.xy(1, 7));
		publicKeyLabel = new JLabel();
		publicKeyLabel.setEnabled(false);
		this.$$$loadLabelText$$$(publicKeyLabel, ResourceBundle.getBundle("thaw/i18n/thaw").getString("thaw.plugin.insert.publicKey"));
		panelKeyType.add(publicKeyLabel, cc.xy(1, 9));
		privateKeyLabel = new JLabel();
		privateKeyLabel.setEnabled(false);
		this.$$$loadLabelText$$$(privateKeyLabel, ResourceBundle.getBundle("thaw/i18n/thaw").getString("thaw.plugin.insert.privateKey"));
		panelKeyType.add(privateKeyLabel, cc.xy(1, 11));
		nameField = new JTextField();
		nameField.setEnabled(false);
		panelKeyType.add(nameField, cc.xy(3, 7, CellConstraints.FILL, CellConstraints.DEFAULT));
		publicKeyField = new JTextField();
		publicKeyField.setEnabled(false);
		panelKeyType.add(publicKeyField, cc.xy(3, 9, CellConstraints.FILL, CellConstraints.DEFAULT));
		privateKeyField = new JTextField();
		privateKeyField.setEnabled(false);
		panelKeyType.add(privateKeyField, cc.xy(3, 11, CellConstraints.FILL, CellConstraints.DEFAULT));
		letsGoButton = new JButton();
		this.$$$loadButtonText$$$(letsGoButton, ResourceBundle.getBundle("thaw/i18n/thaw").getString("thaw.plugin.insert.insertAction"));
		panelInsert.add(letsGoButton, cc.xyw(1, 7, 3));
		priorityLabel.setLabelFor(prioritySelecter);
		globalLabel.setLabelFor(globalSelecter);
		mimeLabel.setLabelFor(mimeField);
		selectRevLabel.setLabelFor(revField);
		selectNameLabel.setLabelFor(nameField);
		publicKeyLabel.setLabelFor(publicKeyField);
		privateKeyLabel.setLabelFor(privateKeyField);
		keyRadioButtons = new ButtonGroup();
		keyRadioButtons.add(rbCHK);
		keyRadioButtons.add(rbKSK);
		keyRadioButtons.add(rbSSK_USK);
	}

	/**
	 * @noinspection ALL
	 */
	private void $$$loadLabelText$$$(JLabel component, String text) {
		StringBuffer result = new StringBuffer();
		boolean haveMnemonic = false;
		char mnemonic = '\0';
		int mnemonicIndex = -1;
		for (int i = 0; i < text.length(); i++) {
			if (text.charAt(i) == '&') {
				i++;
				if (i == text.length()) {
					break;
				}
				if (!haveMnemonic && text.charAt(i) != '&') {
					haveMnemonic = true;
					mnemonic = text.charAt(i);
					mnemonicIndex = result.length();
				}
			}
			result.append(text.charAt(i));
		}
		component.setText(result.toString());
		if (haveMnemonic) {
			component.setDisplayedMnemonic(mnemonic);
			component.setDisplayedMnemonicIndex(mnemonicIndex);
		}
	}

	/**
	 * @noinspection ALL
	 */
	private void $$$loadButtonText$$$(AbstractButton component, String text) {
		StringBuffer result = new StringBuffer();
		boolean haveMnemonic = false;
		char mnemonic = '\0';
		int mnemonicIndex = -1;
		for (int i = 0; i < text.length(); i++) {
			if (text.charAt(i) == '&') {
				i++;
				if (i == text.length()) {
					break;
				}
				if (!haveMnemonic && text.charAt(i) != '&') {
					haveMnemonic = true;
					mnemonic = text.charAt(i);
					mnemonicIndex = result.length();
				}
			}
			result.append(text.charAt(i));
		}
		component.setText(result.toString());
		if (haveMnemonic) {
			component.setMnemonic(mnemonic);
			component.setDisplayedMnemonicIndex(mnemonicIndex);
		}
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return panelInsert;
	}


	private class InsertActionPerformed implements ActionListener {
		public void actionPerformed(ActionEvent actionEvent) {
			int rev = -1;
			String name = null;
			String privateKey = null;
			int priority = 6;
			boolean global;
			boolean compress;
			//int persistence = 0;

			String filenames = "";
			for (Object file : selectedFilesListModel.toArray()) {
				if (file instanceof File) {
					filenames += ((File) file).getAbsolutePath() + ";";
				} else {
					Logger.warning(this, "Non-file entry received.");
				}
			}

			if (filenames.isEmpty()) {
				new WarningWindow(mainWindow,
						I18n.getMessage("thaw.plugin.insert.specifyFile"));
				return;
			}

			if ((keyType == FCPClientPut.KEY_TYPE_KSK) || (keyType == FCPClientPut.KEY_TYPE_SSK)) {
				if ((nameField.getText() == null) || "".equals(nameField.getText())) {
					new WarningWindow(mainWindow,
							I18n.getMessage("thaw.plugin.insert.specifyNameAndRev"));
					return;
				}

				if (revField.getText() != null && !revField.getText().equals("")) {
					rev = Integer.parseInt(revField.getText());
				} else {
					rev = -1;
				}
				name = nameField.getText();
			}

			if (keyType == FCPClientPut.KEY_TYPE_SSK) {
				if ((privateKeyField.getText() != null) && !"".equals(privateKeyField.getText())) {
					privateKey = privateKeyField.getText();

					if ((privateKey != null) && !"".equals(privateKey)) {
						privateKey = privateKey.replaceFirst("SSK@", "");
						privateKey = privateKey.replaceFirst("USK@", "");
						final String[] split = privateKey.split("/");
						privateKey = split[0];
					} else {
						privateKey = null;
					}
				}
			}

			for (int i = 0; i <= MIN_PRIORITY; i++) {
				if (I18n.getMessage("thaw.plugin.priority.p" + Integer.toString(i)).equals(prioritySelecter.getSelectedItem())) {
					priority = i;
				}
			}

			global = globalSelecter.isSelected();
			compress = compressSelecter.isSelected();

			String mimeType = null;

			if ((mimeField.getSelectedItem() != null) && !(mimeField.getSelectedItem()).equals("")) {
				mimeType = (String) mimeField.getSelectedItem();
			}

			selectedFilesListModel.removeAllElements();
			insertPlugin.insertFile(filenames,
					keyType, rev, name, privateKey, priority,
					global, FCPClientPut.PERSISTENCE_FOREVER, compress, mimeType);
		}
	}


	private class AddFileActionPerformed implements ActionListener {
		public void actionPerformed(ActionEvent actionEvent) {
			final FileChooser fileChooser;
			Vector<File> files;
			String lastDir = null;

			if (config.getValue("lastSourceDirectory") != null) {
				lastDir = config.getValue("lastSourceDirectory");
			}

			if (lastDir == null) {
				fileChooser = new FileChooser();
			} else {
				fileChooser = new FileChooser(lastDir);
			}

			fileChooser.setTitle(I18n.getMessage("thaw.common.selectFile"));
			fileChooser.setDirectoryOnly(false);
			fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
			if ((files = fileChooser.askManyFiles()) == null) {
				Logger.info(this, "Nothing selected");
				return;
			}

			if (files.size() > 0) {
				config.setValue("lastSourceDirectory", fileChooser.getFinalDirectory());
			}

			for (File file : files) {
				if (!selectedFilesListModel.contains(file)) {
					selectedFilesListModel.addElement(file);
				}
			}

			updateNameField();

		}
	}

	private class RemoveFileActionPerformed implements ActionListener {
		public void actionPerformed(ActionEvent actionEvent) {
			for (Object file : selectedFiles.getSelectedValues()) {
				if (selectedFilesListModel.contains(file)) {
					selectedFilesListModel.removeElement(file);
				}
			}

			updateNameField();
		}
	}

	private Vector<File> getSelectedFiles() {
		Vector<File> files = new Vector<File>();

		if (selectedFilesListModel != null) {
			for (Object object : selectedFilesListModel.toArray()) {
				if (object instanceof File) {
					files.add((File) object);
				}
			}
		}

		return files;
	}

	/**
	 * Returns a semicolon-separated string of file names.  If one or fewer
	 * File objects are present, no semicolon is appended.
	 *
	 * @param files Collection of File objects.
	 * @return Empty string, a single file name, or a semicolon-separated
	 *         string of file names.
	 */
	public String getFileNamesStringFromPath(Collection<File> files) {
		if (files == null) {
			return "";
		}

		StringBuilder fileNames = new StringBuilder();
		boolean appendSemicolon = false;
		for (File file : files) {
			if (file != null) {
				if (appendSemicolon) {
					fileNames.append(";");
				} else {
					appendSemicolon = true;
				}
				fileNames.append(file.getName());
			}
		}

		return fileNames.toString();
	}

	public void itemStateChanged(final ItemEvent e) {
		if (e.getStateChange() == ItemEvent.SELECTED) {
			UpdateKeyType();
			resetOptionalFields();
		}
	}

	private void UpdateKeyType() {
		if (rbCHK.isSelected()) {
			keyType = FCPClientPut.KEY_TYPE_CHK;
			setKeysEnabled(false);
			setRevAndNameEnabled(false);
		} else if (rbKSK.isSelected()) {
			keyType = FCPClientPut.KEY_TYPE_KSK;
			setKeysEnabled(false);
			setRevAndNameEnabled(true);
		} else if (rbSSK_USK.isSelected()) {
			keyType = FCPClientPut.KEY_TYPE_SSK;
			setRevAndNameEnabled(true);
			setKeysEnabled(true);
		} else {
			Logger.warning(this, "Invalid insert key type selection.");
		}
	}


	public void setLastInserted(final FCPClientPut lastInserted) {
		lastInsert = lastInserted;
	}

	private void setRevAndNameEnabled(final boolean v) {
		selectRevLabel.setEnabled(v);
		revField.setEnabled(v);
		selectNameLabel.setEnabled(v);
		nameField.setEnabled(v);
	}

	private void setKeysEnabled(final boolean v) {
		publicKeyLabel.setEnabled(v);
		publicKeyField.setEnabled(v);
		privateKeyLabel.setEnabled(v);
		privateKeyField.setEnabled(v);
	}

	private void resetOptionalFields() {
		updateNameField();

		if (!revField.isEnabled()) {
			revField.setText("0");
		}

		if (!privateKeyField.isEnabled()) {
			privateKeyField.setText("");
		}

		if (!publicKeyField.isEnabled()) {
			publicKeyField.setText("");
		}
	}

	private void updateNameField() {
		if (nameField.isEnabled()) {
			nameField.setText(getFileNamesStringFromPath(getSelectedFiles()));
		} else {
			nameField.setText("");
		}
	}

	public void update(final Observable o, final Object param) {
		if (o == lastInsert) {
			final FCPClientPut clientPut = (FCPClientPut) o;

			if (clientPut.getKeyType() == 2) {
				Logger.info(this, "Updating display");

				if (clientPut.getPublicKey() != null) {
					String publicKey = clientPut.getPublicKey();
					publicKey = publicKey.replaceFirst("SSK@", "");
					publicKey = publicKey.replaceFirst("USK@", "");
					final String[] split = publicKey.split("/");
					publicKeyField.setText(split[0]);
				} else {
					publicKeyField.setText("");
				}

				if (clientPut.getPrivateKey() != null) {
					String privateKey = clientPut.getPrivateKey();
					privateKey = privateKey.replaceFirst("SSK@", "");
					privateKey = privateKey.replaceFirst("USK@", "");
					final String[] split = privateKey.split("/");
					privateKeyField.setText(split[0]);

				} else {
					privateKeyField.setText("");
				}

			} else {
				publicKeyField.setText("");
				privateKeyField.setText("");
			}

		} else {
			o.deleteObserver(this);
		}
	}

	private void createUIComponents() {
		// TODO: place custom component creation code here
		selectedFilesListModel = new DefaultListModel();
		selectedFiles = new JList(selectedFilesListModel);
	}
}
